#!/usr/bin/env python
from __future__ import print_function
import warnings
# Suppress warnings from Molecule class.
warnings.simplefilter("ignore")
from collections import OrderedDict
from forcebalance.nifty import queue_up, wq_wait
from nanoreactor.molecule import *
from nanoreactor.chemistry import *
import work_queue
import itertools
import networkx as nx
import numpy as np
import os, sys

def FixMol2(fnm,elem):
    # Fix bond orders and names of ligands
    Mode = 0
    Out = []
    xyz = []
    for line in open(fnm).readlines():
        if Mode >= 1 and '<TRIPOS>' in line:
            Mode = 0
        if Mode == 0:
            Out.append(line.replace('\n',''))
        if Mode == 1:
            s = line.split()
            Out.append("%7s %-5s    %9s %9s %9s %-7s %2s %4s  %12s" % (s[0],s[1],s[2],s[3],s[4],s[5],s[6],'M%i' % FixMol2.num,s[8]))
            xyz.append(np.array([float(i) for i in s[2:5]]))
        if Mode == 2:
            s = line.split()
            ai = int(s[1])-1
            aj = int(s[2])-1
            b = np.linalg.norm(xyz[ai] - xyz[aj])
            bo = BondStrengthByLength(elem[ai],elem[aj],b,artol=0.45)[1]
            if bo == 1.5:
                bo = 'ar'
            bo = str(bo)
            Out.append("%6d %5d %5d %4s" % (int(s[0]),int(s[1]),int(s[2]), bo))
        if Mode == 0 and '<TRIPOS>ATOM' in line:
            Mode = 1
        if Mode == 0 and '<TRIPOS>BOND' in line:
            Mode = 2
    FixMol2.num += 1
    return Out
FixMol2.num = 2

def FixMol2_Grp(fnm,elem):
    # Fix bond orders and names of ligands
    # Fix some weird stuff from OpenBabel with ligand names
    # and the comment line being too long
    Mode = 0
    Stor = None
    Prnt = None
    Num  = 1
    Out = []
    xyz = []
    ln = 0
    for ln, line in enumerate(open(fnm).readlines()):
        if Mode >= 1 and '<TRIPOS>' in line:
            Mode = 0
        if ln == 1:
            Out.append('Generated by Grid.py')
        elif Mode == 0:
            Out.append(line.replace('\n',''))
        elif Mode == 1:
            s = line.split()
            if s[7] != Stor:
                Stor = s[7]
                Prnt = 'M%i' % Num
                Num += 1
            Out.append("%7s %-5s    %9s %9s %9s %-7s %2s %4s  %12s" % (s[0],s[1],s[2],s[3],s[4],s[5],s[6],Prnt,s[8]))
            xyz.append(np.array([float(i) for i in s[2:5]]))
        elif Mode == 2:
            s = line.split()
            ai = int(s[1])-1
            aj = int(s[2])-1
            b = np.linalg.norm(xyz[ai] - xyz[aj])
            bo = BondStrengthByLength(elem[ai],elem[aj],b,artol=0.45)[1]
            if bo == 1.5:
                bo = 'ar'
            bo = str(bo)
            Out.append("%6d %5d %5d %4s" % (int(s[0]),int(s[1]),int(s[2]), bo))
        if Mode == 0 and '<TRIPOS>ATOM' in line:
            Mode = 1
        if Mode == 0 and '<TRIPOS>BOND' in line:
            Mode = 2
    return Out

grid=int(len(sys.argv[1:])**0.5)+1
displaces = [np.array(i) for i in list(itertools.product(list(range(grid)),list(range(grid)),[0]))]
molnum = 0
space = float(input("Enter grid spacing (try 8 angstroms) >> "))
fouts = sys.argv[1:]

# extents = []
# for fout in fouts:
#     M = Molecule(fout)
#     extents.append(np.max(M.xyzs[0],axis=0) - np.min(M.xyzs[0],axis=0))
# extents = np.array(extents)
# print extents

def mindist(xyz1,xyz2):
    dists = []
    for xi in xyz1:
        for xj in xyz2:
            dists.append(np.linalg.norm(xj - xi))
    return np.min(np.array(dists))

def make_grid():
    Grid = None
    molnum = 0
    x_by_mol = []
    for fout in fouts:
        if Grid == None: 
            Grid = Molecule(fout)
            Grid.xyzs[0] -= np.mean(Grid.xyzs[0],axis=0)
            extent = np.max(Grid.xyzs[0],axis=0) - np.min(Grid.xyzs[0],axis=0)
            if extent[0] == 0 and extent[1] == 0:
                Grid.xyzs[0] = Grid.xyzs[0][:,[2,1,0]]
            extent = np.max(Grid.xyzs[0],axis=0) - np.min(Grid.xyzs[0],axis=0)
            if extent[0] == min(extent):
                Grid.xyzs[0] = Grid.xyzs[0][:,[2,1,0]]
            elif extent[1] == min(extent):
                Grid.xyzs[0] = Grid.xyzs[0][:,[0,2,1]]
            Grid.write("temp0.xyz")
            x_by_mol.append(Grid.xyzs[0].copy())
            os.system('babel -ixyz temp0.xyz -omol2 temp0.mol2 &> /dev/null')
            o = open('temp1.mol2','w')
            for line in FixMol2('temp0.mol2',Grid.elem):
                print(line, file=o)
            o.close()
            os.system('mv temp1.mol2 temp0.mol2')
        else:
            New = Molecule(fout)
            New.xyzs[0] -= np.mean(New.xyzs[0],axis=0)
            extent = np.max(New.xyzs[0],axis=0) - np.min(New.xyzs[0],axis=0)
            if extent[0] == 0 and extent[1] == 0:
                New.xyzs[0] = New.xyzs[0][:,[2,1,0]]
            extent = np.max(New.xyzs[0],axis=0) - np.min(New.xyzs[0],axis=0)
            if extent[0] == min(extent):
                New.xyzs[0] = New.xyzs[0][:,[2,1,0]]
            elif extent[1] == min(extent):
                New.xyzs[0] = New.xyzs[0][:,[0,2,1]]
            New.xyzs[0] += np.array(displaces[molnum])*space
            x_by_mol.append(New.xyzs[0].copy())
            New.write("temp1.xyz")
            os.system('babel -ixyz temp1.xyz -omol2 temp1.mol2 &> /dev/null')
            os.system('sed -i s/LIG1/LIG%i/g temp1.mol2' % (molnum+1))
            o = open('temp2.mol2','w')
            for line in FixMol2('temp1.mol2',New.elem):
                print(line, file=o)
            o.close()
            Grid.xyzs[0] = np.vstack((Grid.xyzs[0],New.xyzs[0]))
            Grid.elem = Grid.elem + New.elem
            os.system('babel -imol2 temp0.mol2 -imol2 temp2.mol2 -omol2 join.mol2 --join &> /dev/null')
            o = open('temp0.mol2','w')
            for line in FixMol2_Grp('join.mol2',Grid.elem):
                print(line, file=o)
            o.close()
        Grid.comms = ['Reaction product grid']
        molnum += 1

    print("Writing output to grid.xyz and grid.mol2")
    print("To visualize in PyMol, open the .mol 2 file and then type into the terminal (without >):")
    print("PyMOL> hide")
    print("PyMOL> as lines")
    print("PyMOL> set valence, 0.1")
    print("PyMOL> set_bond stick_radius, 0.15, all")
    Grid.write("grid.xyz")
    os.system('mv temp0.mol2 grid.mol2')
    os.system('rm temp*.mol2 join.mol2')
    return min([mindist(t[0],t[1]) for t in list(itertools.combinations(x_by_mol,2))])

smin = make_grid()
print("Detected minimum %.1f spacing between molecules.  Feel free to rerun and adjust spacing accordingly." % smin)
